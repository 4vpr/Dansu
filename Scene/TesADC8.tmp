[gd_scene load_steps=15 format=3 uid="uid://b8in7w7bfex2h"]

[ext_resource type="Script" path="res://scripts/playScene.gd" id="1_kw8k4"]
[ext_resource type="Texture2D" uid="uid://ds0pax4p4xljv" path="res://Textures/miku.png" id="2_j68gb"]
[ext_resource type="Script" path="res://scripts/player.gd" id="3_f0kkb"]
[ext_resource type="Texture2D" uid="uid://cutwk4vtb2r6w" path="res://Textures/panel.png" id="4_piqfe"]
[ext_resource type="Texture2D" uid="uid://d1rorifxkipaa" path="res://Textures/asd.png" id="5_76ftv"]

[sub_resource type="Shader" id="Shader_lwve4"]
code = "shader_type spatial;
render_mode blend_add,depth_draw_never,cull_front,shadows_disabled,skip_vertex_transform,unshaded;

// Visual properties:
uniform sampler2D texture_emission : hint_default_black, filter_linear_mipmap;
uniform vec3 texture_emission_tint;
uniform float blur_amount : hint_range(0.0, 1.0) = 0.5;
uniform float emission_energy;
uniform float billboard_size_deg : hint_range(0, 90) = 90;
uniform float luminosity_cap = 1e300;
uniform float meters_per_lightyear = 100.0;
uniform float color_gamma : hint_range(0.0, 10.0) = 1.0;
uniform float texture_gamma = 1000.0;
uniform bool clamp_output = false;

// PSF cropping related uniforms:
uniform float min_size_ratio : hint_range(0, 1.0) = 1.0;
uniform float max_luminosity;
uniform float scaling_gamma : hint_range(0.0, 2.0) = 1.0;
uniform bool debug_show_rects = false;


varying vec3 STAR_COLOR;


const float luminosity_sun = 3.846e26;
const float lightyear_length = 9.460730e15;


void vertex() {
	// Find distance from camera
	float dist = -(MODELVIEW_MATRIX * vec4(vec3(0.0), 1.0)).z;
	// Use lightyear scaling ratio, then convert back to meters.
	highp float dist_adj = dist * (lightyear_length / meters_per_lightyear);

	highp float dimming = 1.0 / (dist_adj * dist_adj);
	// Combine these first because one is very large and one is very small.
	highp float emission = luminosity_sun * dimming;
	float luminosity = INSTANCE_CUSTOM.r * emission_energy * emission;
	luminosity = min(luminosity, luminosity_cap);
	STAR_COLOR = pow(COLOR.rgb, vec3(color_gamma)) * luminosity;

	// Next do cropping, which is important for performance. Otherwise rendering thousands of PSF textures overlapping will create tons of overdraw.
	// The idea here is that the PSF texture is not scaled down, instead it's cropped towards the center, based on how bright we expect it to be.
	// Values towards the edges are extremely dim, so if the luminance is not high then they will round to zero.
	float scale_ratio = clamp(luminosity / max_luminosity, 0.0, 1.0);
	scale_ratio = pow(scale_ratio, scaling_gamma);
	scale_ratio = mix(min_size_ratio, 1.0, scale_ratio);
	float size = scale_ratio * billboard_size_deg;
	UV = (UV - vec2(0.5)) * scale_ratio + vec2(0.5);

	// Billboard rotation locking.
	MODELVIEW_MATRIX = VIEW_MATRIX * mat4(INV_VIEW_MATRIX[0],INV_VIEW_MATRIX[1],INV_VIEW_MATRIX[2],MODEL_MATRIX[3]);
	// Use zero instead of VERTEX position because we want to position the quad in clip space instead.
	vec3 modelview_pos = (MODELVIEW_MATRIX * vec4(vec3(0.0), 1.0)).xyz;

	// Do actual perspective projection.
	vec4 projected = PROJECTION_MATRIX * vec4(modelview_pos, 1.0);
	// Figure out the scaling to use in clip space so that we can measure in degrees instead of device pixels.
	float camera_vertical_fov = degrees(atan(-1.0 / PROJECTION_MATRIX[1][1]) * 2.0);
	vec2 one_degree = vec2(1.0, VIEWPORT_SIZE.x / VIEWPORT_SIZE.y) / camera_vertical_fov;
	// Offset the projected position to form the quad.
	POSITION = projected + vec4(VERTEX.xy * projected.w * size * one_degree, 0.0, 0.0);

	// Force Z value to far clip plane so that it will always render behind everything else.
	// This also prevents it being clipped, which lets stars be seen from much further away than the camera far plane would normally allow.
	//
	// Doing this in Godot 4.3 is different depending on the renderer, requiring hacks.
	// Godot 4.4 adds some new macros that make this less painful.
	// <https://github.com/godotengine/godot/issues/100310#issuecomment-2542388318>
	//
	// POSITION.z = CLIP_SPACE_FAR * projected.w;
	if (OUTPUT_IS_SRGB) {
		POSITION.z = -1.0 * projected.w;
	} else {
		POSITION.z = 0.0 * projected.w;
	}
}


vec3 to_srgb(vec3 linearRGB)
{
    bvec3 cutoff = lessThan(linearRGB, vec3(0.0031308));
    vec3 higher = vec3(1.055)*pow(linearRGB, vec3(1.0/2.4)) - vec3(0.055);
    vec3 lower = linearRGB * vec3(12.92);

    return vec3(mix(higher, lower, cutoff));
}


void fragment() {
	vec3 emission_tex = texture(texture_emission, UV).rgb;
	vec2 pixel_size = fwidth(UV * 1024.0);
	vec2 pos = vec2(UV * 1024.0 - 512.0);
	float dist = dot(pos, pos) + 1.0 + pixel_size.x * blur_amount;
	emission_tex = (pow(vec3(texture_gamma), emission_tex / dist) - 1.0) / vec3(999.0) * texture_emission_tint;
	vec3 color = STAR_COLOR * emission_tex;
	if (clamp_output)
		color = clamp(color, 0.0, 1.0);

	// Useful when debugging min_size_deg/max_luminance:
	if (debug_show_rects)
		color += vec3(0.1);

	// In compatibility renderer we need to convert to sRGB manually.
	// Otherwise the result will look washed out.
	if (OUTPUT_IS_SRGB)
		color = to_srgb(color);

	if (color.x < 0.001 && color.y < 0.001 && color.z < 0.001)
		discard;

	ALBEDO = color;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_m50px"]
render_priority = 2
shader = SubResource("Shader_lwve4")
shader_parameter/texture_emission_tint = null
shader_parameter/blur_amount = 0.5
shader_parameter/emission_energy = -0.975
shader_parameter/billboard_size_deg = 90.0
shader_parameter/luminosity_cap = inf
shader_parameter/meters_per_lightyear = 100.0
shader_parameter/color_gamma = 1.0
shader_parameter/texture_gamma = 1000.0
shader_parameter/clamp_output = false
shader_parameter/min_size_ratio = 1.0
shader_parameter/max_luminosity = null
shader_parameter/scaling_gamma = 1.0
shader_parameter/debug_show_rects = false

[sub_resource type="Sky" id="Sky_cgh6o"]
sky_material = SubResource("ShaderMaterial_m50px")

[sub_resource type="Environment" id="Environment_uxsa0"]
background_mode = 2
background_color = Color(0.31641, 0.292207, 0.566389, 1)
background_energy_multiplier = 1.63
sky = SubResource("Sky_cgh6o")
reflected_light_source = 1
glow_enabled = true

[sub_resource type="CameraAttributesPractical" id="CameraAttributesPractical_0q75b"]

[sub_resource type="Compositor" id="Compositor_iom8a"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_s7qk6"]
transparency = 1
albedo_texture = ExtResource("4_piqfe")

[sub_resource type="PlaneMesh" id="PlaneMesh_vlhvm"]
size = Vector2(2, 13)

[sub_resource type="LabelSettings" id="LabelSettings_4uwsm"]
line_spacing = 0.0
font_size = 40
font_color = Color(1, 0.964706, 1, 1)
outline_size = 5
outline_color = Color(0, 0, 0, 1)
shadow_size = 0
shadow_color = Color(0.780392, 1, 1, 1)
shadow_offset = Vector2(0, 0)

[node name="PlayScene" type="Node3D"]
script = ExtResource("1_kw8k4")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_uxsa0")
camera_attributes = SubResource("CameraAttributesPractical_0q75b")
compositor = SubResource("Compositor_iom8a")

[node name="Player" type="Sprite3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.005, 0.75, 1.054)
pixel_size = 0.001
texture = ExtResource("2_j68gb")
region_rect = Rect2(0, 0, 214.879, 510.717)
script = ExtResource("3_f0kkb")

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1.8)
near = 0.001

[node name="Ground" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.939693, -0.34202, 0, 0.34202, 0.939693, 0, 2.25, -3.8)

[node name="MeshInstance3D" type="MeshInstance3D" parent="Ground"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 2.98023e-08, 1, 0.000394821, -0.0241548, 0.018528)
material_override = SubResource("StandardMaterial3D_s7qk6")
mesh = SubResource("PlaneMesh_vlhvm")
skeleton = NodePath("../..")

[node name="RailContainor" type="Node3D" parent="Ground"]
transform = Transform3D(0.999999, 0, 0, 0, 0.999999, 2.68221e-07, 0, 1.19209e-07, 1, 0, -0.5, -0.034)

[node name="SongPlayer" type="AudioStreamPlayer" parent="."]

[node name="UI" type="Control" parent="."]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Judge" type="Label" parent="UI"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -20.0
offset_top = -90.0
offset_right = 20.0
offset_bottom = -21.0
grow_horizontal = 2
grow_vertical = 2
text = "perfect"
label_settings = SubResource("LabelSettings_4uwsm")
horizontal_alignment = 1
vertical_alignment = 1

[node name="Combo" type="Label" parent="UI"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -20.0
offset_top = -34.5
offset_right = 20.0
offset_bottom = 34.5
grow_horizontal = 2
grow_vertical = 2
text = "0"
label_settings = SubResource("LabelSettings_4uwsm")
horizontal_alignment = 1
vertical_alignment = 1

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(0.986118, -0.139732, 0.0896992, 0.0920471, 0.909635, 0.405081, -0.138196, -0.391202, 0.90987, 0, 3.39844, 3.63343)

[node name="Sprite3D" type="Sprite3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, -8.377)
pixel_size = 0.022
texture = ExtResource("5_76ftv")
